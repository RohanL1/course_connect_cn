# from django.contrib.auth import authenticate, login, logout
# from django.contrib.auth.decorators import login_required
# from django.http import JsonResponse

# from rest_framework.authtoken.models import Token
# from rest_framework.authtoken.views import ObtainAuthToken
# from rest_framework.response import Response
# from rest_framework.views import APIView

# class LoginView(ObtainAuthToken):
#     def post(self, request, *args, **kwargs):
#         serializer = self.serializer_class(data=request.data, context={'request': request})
#         serializer.is_valid(raise_exception=True)
#         user = serializer.validated_data['user']
#         token, created = Token.objects.get_or_create(user=user)
#         return Response({'token': token.key})


# def test_api(request):
#     temp_data = 'temp data'
#     return JsonResponse({{'status': 'success', 'data': f'{temp_data}'}})

# # Login API
# def login_api(request):
#     if request.method == 'POST':
#         username = request.POST.get('username')
#         password = request.POST.get('password')
#         user = authenticate(request, username=username, password=password)
#         if user is not None:
#             login(request, user)
#             return JsonResponse({'status': 'success', 'message': 'Login successful.'})
#         else:
#             return JsonResponse({'status': 'error', 'message': 'Invalid username or password.'})
#     else:
#         return JsonResponse({'status': 'error', 'message': 'Invalid request method.'})

# # Logout API
# @login_required
# def logout_api(request):
#     logout(request)
#     return JsonResponse({'status': 'success', 'message': 'Logout successful.'})

# # Get User Info API
# @login_required
# def user_info_api(request):
#     user = request.user
#     user_info = {'username': user.username, 'email': user.email}
#     return JsonResponse({'status': 'success', 'user_info': user_info})

# # Get User Data API
# @login_required
# def user_data_api(request):
#     user = request.user
#     # Get the user data from the database or another source
#     user_data = {'key1': 'value1', 'key2': 'value2'}
#     return JsonResponse({'status': 'success', 'user_data': user_data})



# import json

# from django.contrib.auth import authenticate, login, logout
# from django.http import JsonResponse
# from django.views.decorators.csrf import ensure_csrf_cookie
# from django.views.decorators.http import require_POST

# from rest_framework.authentication import SessionAuthentication, BasicAuthentication
# from rest_framework.permissions import IsAuthenticated
# from rest_framework.views import APIView

# @require_POST
# def login_view(request):
#     data = json.loads(request.body)
#     username = data.get('username')
#     password = data.get('password')

#     if username is None or password is None:
#         return JsonResponse({'detail': 'Please provide username and password.'}, status=400)

#     user = authenticate(username=username, password=password)

#     if user is None:
#         return JsonResponse({'detail': 'Invalid credentials.'}, status=400)

#     login(request, user)
#     return JsonResponse({'detail': 'Successfully logged in.'})


# def logout_view(request):
#     if not request.user.is_authenticated:
#         return JsonResponse({'detail': 'You\'re not logged in.'}, status=400)

#     logout(request)
#     return JsonResponse({'detail': 'Successfully logged out.'})


# @ensure_csrf_cookie
# def session_view(request):
#     if not request.user.is_authenticated:
#         return JsonResponse({'isAuthenticated': False})

#     return JsonResponse({'isAuthenticated': True})

# def test_api(request):
#     temp_data = {'status': 'success', 'data': 'SOMEE DATA'}
#     return JsonResponse(temp_data)

# def whoami_view(request):
#     if not request.user.is_authenticated:
#         return JsonResponse({'isAuthenticated': False})

#     return JsonResponse({'username': request.user.username})


# class SessionView(APIView):
#     authentication_classes = [SessionAuthentication, BasicAuthentication]
#     permission_classes = [IsAuthenticated]

#     @staticmethod
#     def get(request, format=None):
#         return JsonResponse({'isAuthenticated': True})


# class WhoAmIView(APIView):
#     authentication_classes = [SessionAuthentication, BasicAuthentication]
#     permission_classes = [IsAuthenticated]

#     @staticmethod
#     def get(request, format=None):
#         return JsonResponse({'username': request.user.username})