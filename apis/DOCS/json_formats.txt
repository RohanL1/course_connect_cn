
Compute Node
REST apis

GET   /user -- get all the users
POST  /user -- add new user as per JSON in req. body

{
"first_name": "Rohan Vikas",
"last_name": "Lagare",
"email_id": "rohan.v.lagare@gmail.com",
"start_term_id": 123456,
"expected_end_term_id" : 1234,
"enrolled_subjects_ids" : [ 1234,345,32,1223454,4345]
}



GET   /subject -- get all the subjects
POST  /subject -- add new subjects as per JSON in req. body

{
"name": "dummy subject",
"code": "DUMMY001",
"prof_id": ,
"term_id": 1,
"credits" : 2,
}

GET   /professor -- get all the professors
POST  /professor -- add new professor as per JSON in req. body

{
"first_name": "test_f",
"last_name": "test_l",
"email_id": "test@test.com",
"phone_no": "123456789"
}


GET   /term -- get all the professors
POST  /term -- add new professor as per JSON in req. body

{
"name": "test_f",
"end_date": "2023-12-31",
"start_date": "2023-01-31",
"year": "2023"
}

GET user/<int:pk>/			--get info of specific user for given KEY
GET user/<int:pk>/subject/ 		--get all subjects of given users 
GET subject/<int:pk>/   		--get info of specific subject for given KEY
GET subject/<int:pk>/user/		--get all users of specific subject
GET subject/<int:pk>/professor/	        --get professor of specific subject
GET professor/<int:pk>/			--get info of specific professor for given KEY
GET professor/<int:pk>/subject/	        --get all subjects of specific professor
GET term/<int:pk>/			--get info of specific term for given KEY
GET term/<int:pk>/subject/		--get all subjects of specific term


Details :

We are using python and Django framework to create compute nodes.
compute nodes will do following tasks
	-create server to listen to incomming req.
	-connect with the AWS RDS Postgres database  (We are using Django ORM to manage following)
		-to store all the data
		-to create records for user, terms, subjects, from incoming request
		-to update records from incoming request
	
	-listen to incoming requests, and send response as mentioned above
	-send mails to users

## Distributed algos used (Rushang will add info about below)
-ping-ack
-fault tolerance
-leader election
-multi-node load balancing


##send mail algo

input 	- subject (name, term)
output 	- email to users with xlxs file

- find database id from given (name, term)
- get users of all given subject id
- for each user :
	- check for common subjects for other common users
	- create a xlxs file with comm. users (user name, email id, start Term), and their subjects (subject code and term)
	- create html email body according to user first name
	- send mail to users with above email body and xlxs file as attachment using django mail module and google smtp service

## other frameworks. py module used 

decouple - used to decouple ids, passwords and connetion setting from code files
openpyxl - used to create XLXS files for attachment
Django csrf_exempt - as we are not using auth at compute node (handing the same in front end Django), so we are exempting auth process in views.



POST http://localhost:8000/node/set/init/
{
    "node_addrs" : "127.0.0.1:8000",
    "leader" : "127.0.0.1:8000",
    "broker" : "127.0.0.4:8000",
    "next" : "127.0.0.1:8000",
    "successor" : "127.0.0.1:8000",
    "sequence" : 1234,
    "address" : "127.0.0.4:8000"
}

GET http://localhost:8010/node/initiate/election/

POST  http://localhost:8000/node/set/server/
{
    "node_addrs" : "127.0.0.1:8000" 
}


POST  http://127.0.0.1:8000/node/set/neighbour/
{
    "next" : "127.0.0.1:8000",
    "successor" : "127.0.0.1:8000" 
}

{
    "next" : "127.0.0.4:8000"
}

{
    "successor" : "127.0.0.1:8000" 
}


POST  http://127.0.0.1:8000/node/set/leader/
{
    "leader" : "127.0.0.1:8000"
}

POST  http://127.0.0.1:8000/node/set/broker/
{
    "broker" : "127.0.0.4:8000"
}


POST  http://127.0.0.1:8000/node/set/heartbeat/
{
    "sequence" : 1234,
    "address" : "127.0.0.4:8000"
}


POST  http://127.0.0.1:8000/apis/task/
{
  "requestID": 73,
  "email": "mshah4@scu.edu",
  "subscribe": {
    "test_2 2024": ["DUMMY 002"]
   }
}


{
    "requestID": 73, 
    "first_name": "Meet", 
    "last_name": "Shah", 
    "email": "mshah4@scu.edu", 
    "startQuarter": "test_f 2023", 
            "term": {
            "test_f 2023": ["DUMMY 001", "DUMMY 003"], 
            "test_2 2024": ["DUMMY 002"]
            }, 
    "planned": {
        "test_2 2024": ["DUMMY 002"]
        }
}



 /// deleted
POST  http://localhost:8000/ping/setserver/
{
        "destination_host" : "127.0.0.1",
        "message_Broker" :  "127.0.0.1",
        "server_Leader" :  "127.0.0.1"
}

POST  http://localhost:8000/ping/set_up_heartbeat/
{
        "recv_sequence" : 4000

}




POST  http://localhost:8000/ping/alive/
{
        "heartbeat" : 4100
}